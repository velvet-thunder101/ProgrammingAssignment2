## Put comments here that give an overall description of what your
## functions do
## The functions first define the inverse of the matrix in the first function and return its value in the second function
## Write a short comment describing this function
## The function makeCacheMatrix is used to define the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setinverse <- function(inverse) a <<- inverse
getinverse <- function() a
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
##This function actually returns the inverse of the matrix that is given
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
a <- x$getinverse()
if (!is.null(a)) {
message("Cached data is given as follows")
return(a)
}
data <- x$get()
a <- solve(data, ...)
x$setinverse(a)
a
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B1)
ls()
rm(list=ls())
## Put comments here that give an overall description of what your
## functions do
## The functions help to create a matrix and it's inverse and return the value of the inverse of the matrix in the second function
## Write a short comment describing this function
## The function makeCacheMatrix creates a matrix which contains a list containing the functions to set and get the value of the matrix and it's inverse
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
inputmatrix <- function(b) {
x <<- b
a <<- NULL
}
outputmatrix <- function() x
setinversematrix <- function(inversematrix) a <<- inversematrix
getinversematrix <- function() a
list(inputmatrix = inputmatrix,
outputmatrix = outputmatrix,
setinversematrix = setinversematrix,
getinversematrix = getinversematrix)
}
## Write a short comment describing this function
##The function cacheSolve actually returns the inverse of the matrix that we defined in the first function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
a <- x$getinversematrix()
if (!is.null(a)) {
message("Cached data is given as follows")
return(a)
}
data <- x$getmatrix()
a <- solve(data, ...)
x$setinversematrix(a)
a
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
rm(list=ls())
## Put comments here that give an overall description of what your
## functions do
## The functions help to create a matrix and it's inverse and return the value of the inverse of the matrix in the second function
## Write a short comment describing this function
## The function makeCacheMatrix creates a matrix which contains a list containing the functions to set and get the value of the matrix and it's inverse
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
inputmatrix <- function(b) {
x <<- b
a <<- NULL
}
outputmatrix <- function() x
setinversematrix <- function(inverse) a <<- inverse
getinversematrix <- function() a
list(inputmatrix = inputmatrix,
outputmatrix = outputmatrix,
setinversematrix = setinversematrix,
getinversematrix = getinversematrix)
}
## Write a short comment describing this function
##The function cacheSolve actually returns the inverse of the matrix that we defined in the first function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
a <- x$getinversematrix()
if (!is.null(a)) {
message("Cached data is given as follows")
return(a)
}
data <- x$getmatrix()
a <- solve(data, ...)
x$setinversematrix(a)
a
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B) cacheSolve(B1)
E
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
rm(list = ls())
## Put comments here that give an overall description of what your
## functions do
## The functions help to create a matrix and it's inverse and return the value of the inverse of the matrix in the second function
## Write a short comment describing this function
## The function makeCacheMatrix creates a matrix which contains a list containing the functions to set and get the value of the matrix and it's inverse
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
inputmatrix <- function(b) {
x <<- b
a <<- NULL
}
outputmatrix <- function() x
setinversematrix <- function(inverse) a <<- inverse
getinversematrix <- function() a
list(inputmatrix = inputmatrix,
outputmatrix = outputmatrix,
setinversematrix = setinversematrix,
getinversematrix = getinversematrix)
}
## Write a short comment describing this function
##The function cacheSolve actually returns the inverse of the matrix that we defined in the first function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
a <- x$getinversematrix()
if (!is.null(a)) {
message("Cached data is given as follows")
return(a)
}
data <- x$outputmatrix()
a <- solve(data, ...)
x$setinversematrix(a)
a
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
rm(list = ls())
## Put comments here that give an overall description of what your
## functions do
## The functions help to create a matrix and it's inverse and return the value of the inverse of the matrix in the second function
## Write a short comment describing this function
## The function makeCacheMatrix creates a matrix which contains a list containing the functions to set and get the value of the matrix and it's inverse
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
inputmatrix <- function(b) {
x <<- b
a <<- NULL
}
outputmatrix <- function() x
setinversematrix <- function(inversematrix) a <<- inversematrix
getinversematrix <- function() a
list(inputmatrix = inputmatrix,
outputmatrix = outputmatrix,
setinversematrix = setinversematrix,
getinversematrix = getinversematrix)
}
## Write a short comment describing this function
##The function cacheSolve actually returns the inverse of the matrix that we defined in the first function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
a <- x$getinversematrix()
if (!is.null(a)) {
message("Cached data is given as follows")
return(a)
}
data <- x$outputmatrix()
a <- solve(data, ...)
x$setinversematrix(a)
a
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
rm(list  = ls())
## Put comments here that give an overall description of what your
## functions do
## The functions help to create a matrix and it's inverse and return the value of the inverse of the matrix in the second function
## Write a short comment describing this function
## The function makeCacheMatrix creates a matrix which contains a list containing the functions to input and read the value of the matrix and it's inverse
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
inputmatrix <- function(b) {
x <<- b
a <<- NULL
}
outputmatrix <- function() x
setinversematrix <- function(inversematrix) a <<- inversematrix
getinversematrix <- function() a
list(inputmatrix = inputmatrix,
outputmatrix = outputmatrix,
inputinversematrix = inputinversematrix,
outputinversematrix = outputinversematrix)
}
## Write a short comment describing this function
##The function cacheSolve actually returns the inverse of the matrix that we defined in the first function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
c <- x$outputinversematrix()
if (!is.null(c)) {
message("Cached data is given as follows")
return(a)
}
data <- x$outputmatrix()
c <- solve(data, ...) ##solve function calculates the inverse of a matrix and is a predefined function in R
x$inputinversematrix(c)
c
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
rm(list = ls())
## Put comments here that give an overall description of what your
## functions do
## The functions help to create a matrix and it's inverse and return the value of the inverse of the matrix in the second function
## Write a short comment describing this function
## The function makeCacheMatrix creates a matrix which contains a list containing the functions to input and read the value of the matrix and it's inverse
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
inputmatrix <- function(b) {
x <<- b
a <<- NULL
}
outputmatrix <- function() x
inputinversematrix <- function(inversematrix) a <<- inversematrix
outputinversematrix <- function() a
list(inputmatrix = inputmatrix,
outputmatrix = outputmatrix,
inputinversematrix = inputinversematrix,
outputinversematrix = outputinversematrix)
}
## Write a short comment describing this function
##The function cacheSolve actually returns the inverse of the matrix that we defined in the first function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
c <- x$outputinversematrix()
if (!is.null(c)) {
message("Cached data is given as follows")
return(a)
}
data <- x$outputmatrix()
c <- solve(data, ...) ##solve function calculates the inverse of a matrix and is a predefined function in R
x$inputinversematrix(c)
c
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B1)
rm(list = ls())
## Put comments here that give an overall description of what your
## functions do
## The functions help to create a matrix and it's inverse and return the value of the inverse of the matrix in the second function
## Write a short comment describing this function
## The function makeCacheMatrix creates a matrix which contains a list containing the functions to input and read the value of the matrix and it's inverse
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
inputmatrix <- function(b) {
x <<- b
a <<- NULL
}
outputmatrix <- function() x
inputinversematrix <- function(inversematrix) a <<- inversematrix
outputinversematrix <- function() a
list(inputmatrix = inputmatrix,
outputmatrix = outputmatrix,
inputinversematrix = inputinversematrix,
outputinversematrix = outputinversematrix)
}
## Write a short comment describing this function
##The function cacheSolve actually returns the inverse of the matrix that we defined in the first function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
c <- x$outputinversematrix()
if (!is.null(c)) {
message("Your matrix hasn't changed so the cached data is printed again")
return(c)
}
data <- x$outputmatrix()
c <- solve(data, ...) ##solve function calculates the inverse of a matrix and is a predefined function in R
x$inputinversematrix(c)
c
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B1)
